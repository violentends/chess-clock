{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","locked","started","activePlayer","players","name","time","App","state","this","interval","setInterval","elapsedTime","Date","now","currentTime","newPlayers","map","p","idx","player","setState","clearInterval","className","Player","key","active","onSetTime","newTime","index","onTakeTurn","newState","onNameChange","newName","v","onClick","React","Component","ms","seconds","Math","floor","minutes","milliseconds","minuteStr","toString","length","secondStr","millisecondStr","slice","string","totalMs","Timer","t","_minutes","_seconds","_milliseconds","_count","_string","diff","props","useState","timePopup","setTimePopup","e","stopPropagation","window","prompt","match","TimeForm","setTime","onSubmit","preventDefault","count","onChange","target","value","placeholder","type","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8e419a6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst initialState = {locked: false, started: false, activePlayer: -1, players: [{ name: 'Player 1', time: 15000}, {name: 'Player 2', time: 15000}]};\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {...initialState, players: [...initialState.players]};\n  }\n  componentDidMount(){\n    this.interval = setInterval(() => {\n      if(this.state.started){\n        let elapsedTime = Date.now() - this.state.currentTime;\n        let started = this.state.started;\n        let activePlayer = this.state.activePlayer;\n        let newPlayers = this.state.players.map((p, idx) =>{\n          let player = {...p}\n          if(idx === this.state.activePlayer){\n            player.time -= elapsedTime;\n            if(player.time <= 0) {\n              player.time = 0;\n              started = false;\n              activePlayer = -1;\n            }\n          }\n          return player;\n        })\n        this.setState({...this.state, activePlayer, started, players: newPlayers, currentTime: Date.now()});\n      }\n    }, 70);\n  }\n  componentWillUnmount(){\n    clearInterval(this.interval);\n  }\n  render () {\n    return (\n      <div className=\"layout\">\n        {this.state.players.map((p, idx) => <Player \n          key={idx} \n          active={idx === this.state.activePlayer}\n          locked={this.state.locked}\n          onSetTime={(newTime) => {\n            this.setState({...this.state, players: this.state.players.map((p, index) => index === idx ? { ...p, time: newTime } : p)})\n          }} \n          onTakeTurn={() => {\n            let newState = {};\n            if(!this.state.started) {\n              newState.started = true;\n            }\n            newState.currentTime = Date.now();\n            newState.activePlayer = idx;\n            this.setState({...this.state, ...newState})\n          }}\n          onNameChange={(newName)=>{\n            this.setState({...this.state, players: this.state.players.map((v, index) => index === idx ? {...v, name: newName} : v)})\n          }} \n          name={p.name}\n          time={p.time} \n        />)}\n        <button className='stopButton' onClick={() => this.setState({...this.state, started: false, activePlayer: -1})}>stop</button>\n        <button className='resetButton'onClick={() => this.setState({...this.state, started: false, activePlayer: -1, players: this.state.players.map(p => { p.time = 15000; return p; })})}>reset</button>\n        <button className='lockButton'onClick={() => this.setState({...this.state, locked: !this.state.locked})}>{this.state.locked ? 'unlock' : 'lock'}</button>\n      </div>\n    );\n  }\n}\n\nfunction time(ms){\n  let seconds = Math.floor(ms / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let milliseconds = (ms - (seconds * 1000));\n  seconds = (seconds - (minutes * 60));\n  let minuteStr = minutes.toString().length < 2 ? `0${minutes}` : minutes;\n  let secondStr = seconds.toString().length < 2 ? `0${seconds}` : seconds;\n  let millisecondStr = milliseconds.toString().length < 2 ? `0${milliseconds}` : milliseconds.toString().slice(0, 2);\n  return { minutes, seconds, milliseconds, string: `${minuteStr}:${secondStr}:${millisecondStr}`, totalMs: ms}\n}\n\nclass Timer {\n  constructor(ms){\n    let t = time(ms);\n    this._minutes = t.minutes;\n    this._seconds = t.seconds;\n    this._milliseconds = t.milliseconds;\n    this._count = t.totalMs;\n    this._string = t.string;\n  }\n  get minutes() {\n    return this._minutes;\n  }\n  get seconds() {\n    return this._seconds;\n  }\n  get milliseconds() {\n    return this._milliseconds;\n  }\n  get count() {\n    return this._count;\n  }\n  toString() {\n    return this._string;\n  }\n\n  set minutes(v) {\n    let diff = v - this.minutes;\n    this._count += (diff * 60000);\n    this._minutes = v;\n    return this;\n  }\n  set second(v) {\n    let diff = v - this.seconds;\n    this._count += (diff * 60);\n    this._seconds = v;\n    return this;\n  }\n  set millisecond(v){\n    let diff = v - this.milliseconds;\n    this._count += diff;\n    this._milliseconds = v;\n    return this;\n  }\n  set count(v){\n    let t = time(v);\n    this._minutes = t.minutes;\n    this._seconds = t.seconds;\n    this._milliseconds = t.milliseconds;\n    this._count = t.totalMs;\n    this._string = t.string;  \n    return this;\n  }\n}\n\nfunction Player(props) {\n  let [timePopup, setTimePopup] = useState(false);\n  return (<div onClick={() => {if(timePopup) return; props.onTakeTurn()}} className={`player ${props.active ? 'active-player' : 'inactive-player'}`}>\n    <div className=\"playerName\" >\n      <span onClick={(e)=>{\n        if(props.locked) return;\n        e.stopPropagation();\n        let newName = window.prompt('enter name');\n        newName = newName ? (newName.match(/\\w+/) ? newName :  props.name) : props.name;\n        props.onNameChange(newName);\n      }}>{props.name}</span>\n    </div>\n    <div onClick={e => {if(props.locked) return; e.stopPropagation()}} className=\"playerTime\">\n      {timePopup ? <TimeForm time={new Timer(props.time)} onSetTime={time => {setTimePopup(false);props.onSetTime(time)}}></TimeForm>: <span>{time(props.time).string}</span>}\n      <button onClick={e => {\n        if(props.locked) return;\n        e.stopPropagation();\n        setTimePopup(!timePopup);\n      }}>{timePopup ? 'cancel' : 'set time'}</button>\n    </div>\n  </div>)\n}\n\nfunction TimeForm(props) {\n  let [time, setTime] = useState(props.time);\n  return (\n    <form \n      onClick={e => e.stopPropagation()} \n      onSubmit={e => {\n        e.preventDefault();\n        props.onSetTime(time.count);\n      }\n    }>\n      <input onChange={e => {time.minutes = e.target.value; setTime(time)}} placeholder={time.minutes} type=\"number\"></input>\n      :\n      <input onChange={e => {time.minutes = e.target.value; setTime(time)}} placeholder={time.seconds} type=\"number\"></input>\n      :\n      <input onChange={e => {time.minutes = e.target.value; setTime(time)}} placeholder={time.milliseconds} type=\"number\"></input>\n      <button>submit</button>\n    </form>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}